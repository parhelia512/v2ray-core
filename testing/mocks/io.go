// Code generated by MockGen. DO NOT EDIT.
// Source: io (interfaces: Reader,Writer)
//
// Generated by this command:
//
//	mockgen -package mocks -destination testing/mocks/io.go -mock_names Reader=Reader,Writer=Writer io Reader,Writer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Reader is a mock of Reader interface.
type Reader struct {
	ctrl     *gomock.Controller
	recorder *ReaderMockRecorder
	isgomock struct{}
}

// ReaderMockRecorder is the mock recorder for Reader.
type ReaderMockRecorder struct {
	mock *Reader
}

// NewReader creates a new mock instance.
func NewReader(ctrl *gomock.Controller) *Reader {
	mock := &Reader{ctrl: ctrl}
	mock.recorder = &ReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Reader) EXPECT() *ReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *Reader) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *ReaderMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*Reader)(nil).Read), p)
}

// Writer is a mock of Writer interface.
type Writer struct {
	ctrl     *gomock.Controller
	recorder *WriterMockRecorder
	isgomock struct{}
}

// WriterMockRecorder is the mock recorder for Writer.
type WriterMockRecorder struct {
	mock *Writer
}

// NewWriter creates a new mock instance.
func NewWriter(ctrl *gomock.Controller) *Writer {
	mock := &Writer{ctrl: ctrl}
	mock.recorder = &WriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Writer) EXPECT() *WriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *Writer) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *WriterMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*Writer)(nil).Write), p)
}
